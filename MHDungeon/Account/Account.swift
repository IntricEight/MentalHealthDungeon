//
//  Account.swift
//  MHDungeon
//

import Foundation
import FirebaseFirestore

/// The default maximum IP value for a new account
// TODO: Move this into a file containing details about a new account's stats?
private let STARTING_MAX_IP = 20

/// A model which manages the application-specfic feature's of the user's account.
class Account: Identifiable, Codable, ObservableObject {
    // Personal Data
    /// The unique ID of the account. Generated by `Firebase`.
    let id: String
    /// The user's chosen name within the application. Modifiable.
    @Published var displayName: String
    /// The user's email address.
    let email: String
    
    // Points Data
    /// The user's current `Inspiration Points` counter.
    @Published var inspirationPoints: Int = 0
    /// The user's maximum `Inspiration Points` allowed.
    var maxIP: Int = STARTING_MAX_IP
    
    // Task Data
    /// A list of the user's tasks. Ordered from oldest to newest.
    // TODO: Make this variable only readable, hide adding/removing functions behind a function
    @Published var taskList: [Task] = []
    /// The number of tasks that the user has completed.
    @Published public private(set) var tasksCompleted: Int = 0
    
    // Dungeon Data
    /// The time when the current dungeon session is completed.
    @Published var dungeonEndTime: Date?
    /// The number of dungeons that the user has completed.
    @Published public private(set) var dungeonsCompleted: Int = 0
    /// Tracks the user's progression through the dungeon.
    var dungeonProgression: [Int] = [1,1]
    
    /// Create a new account with no points. Adds the default tasks to the user's account.
    /// - Parameters:
    ///   - id: The user's unique ID.
    ///   - name: The user's chosen name.
    ///   - email: The user's unique email address.
    init(id: String, displayName name: String, email: String) {
        self.id = id
        self.displayName = name
        self.email = email
        
        // TODO: Remove after task creation process is properly tutorialized. Modify the function's description when this is done.
        self.taskList = createSampleTasks()
    }
    
    // TODO: Saved in case I figure out how to get Firestore to ignore certain attributes
//    var description: String {       // Allows me to control what gets printed to the Console
//        return "Account: \(displayName) : \(email). Contains \(taskList.count) tasks."
//    }
    
    
    /// Custom CodingKeys to match property names during [en/de]coding
    private enum CodingKeys: String, CodingKey {
        // Personal data
        case id
        case displayName
        case email
        
        // Points data
        case inspirationPoints
        case maxIP
        
        // Task data
        case taskList
        case tasksCompleted
        
        // Dungeon data
        case dungeonEndTime
        case dungeonsCompleted
        case dungeonProgression
        
    }
    
    // Custom encoding function to manage the @Published attributes
    /// Encode the Account instance's data.
    func encode(to encoder: any Encoder) throws {
        // A container of the data retrieved from the file
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        // Personal data
        try container.encode(id, forKey: CodingKeys.id)
        try container.encode(displayName, forKey: CodingKeys.displayName)
        try container.encode(email, forKey: CodingKeys.email)
        
        // Points data
        try container.encode(inspirationPoints, forKey: CodingKeys.inspirationPoints)
        try container.encode(maxIP, forKey: CodingKeys.maxIP)
        
        // Task data
        try container.encode(taskList, forKey: CodingKeys.taskList)
        try container.encode(tasksCompleted, forKey: CodingKeys.tasksCompleted)
        
        // Dungeon data
        try container.encodeIfPresent(dungeonEndTime, forKey: CodingKeys.dungeonEndTime)
        try container.encode(dungeonsCompleted, forKey: CodingKeys.dungeonsCompleted)
        try container.encode(dungeonProgression, forKey: CodingKeys.dungeonProgression)
    }

    // Custom decoding init to manage uploaded attributes
    /// Decode the information into an Account instance.
    required init(from decoder: any Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        // Personal data
        id = try container.decode(String.self, forKey: CodingKeys.id)
        displayName = try container.decode(String.self, forKey: CodingKeys.displayName)
        email = try container.decode(String.self, forKey: CodingKeys.email)
        
        // Points data
        inspirationPoints = try container.decode(Int.self, forKey: CodingKeys.inspirationPoints)
        maxIP = try container.decode(Int.self, forKey: CodingKeys.maxIP)
        
        // Task data
        taskList = try container.decode([Task].self, forKey: CodingKeys.taskList)
        tasksCompleted = try container.decode(Int.self, forKey: CodingKeys.tasksCompleted)
        
        // Dungeon data
        dungeonEndTime = try container.decodeIfPresent(Date.self, forKey: CodingKeys.dungeonEndTime)
        dungeonsCompleted = try container.decode(Int.self, forKey: CodingKeys.dungeonsCompleted)
        dungeonProgression = try container.decode([Int].self, forKey: CodingKeys.dungeonProgression)
    }
    
    /// Reward the user with points from a completed `Task`.
    ///
    /// - Parameters:
    ///   - index: The index within the account's task list where the point value is retrieved from.
    func RewardPoints (index: Int) {
        // The points rewarded by the task
        let points = taskList[index].points
        
        // Ensure the points rewarded don't go over the maximum
        if inspirationPoints + points >= maxIP {
            inspirationPoints = maxIP
        }
        else {
            inspirationPoints += points
        }
    }
    
    /// Increases the number of tasks that have been completed by the user throughout their account's lifespan.
    ///
    /// Increments by a default of 1, which should only be overriden in special circumstances.
    ///
    /// - Parameters:
    ///   - count: An integer of how much the completion counter should be increased by. Default value of 1.
    func IncreaseTaskCompletions(count: Int = 1) {
        // Make sure that no overflow error occurs before increasing the task completion count.
        if tasksCompleted < type(of: tasksCompleted).max && count > 0 {
            tasksCompleted += count;
        }
    }
    
    /// Increases the number of dungeon runs that have been completed by the user throughout their account's lifespan by `1`.
    ///
    /// Increments by a default of 1, which should only be overriden in special circumstances.
    ///
    /// - Parameters:
    ///   - count: An integer of how much the completion counter should be increased by. Default value of 1.
    func IncreaseDungeonCompletions(count: Int = 1) {
        // Make sure that no overflow error occurs before increasing the dungeon completion count.
        if dungeonsCompleted < type(of: dungeonsCompleted).max && count > 0 {
            dungeonsCompleted += 1;
        }
    }
    
    /// Progresses the user to the next dungeon stage or level, depending on their progress.
    func ProgressDungeon() {
        // TODO: Once the dungeon layout is complete, implement this function.
        // This function accesses the current dungeon, and checks how many stages it has. If the user is not on the final stage, then progress them to the next stage.
        // If the user is on the final stage, then progress them to the next dungeon.
        // If the user is on the final stage of the final dungeon, then the adventure has been completed, and we will need to inform them of such.
    }
    
    
    
    
    
    
    
    
    // TODO: REMOVE after getting proper task creation working
    /// Create a list of tasks to be used in testing accounts
    func createSampleTasks () -> [Task] {
        var tasks: [Task] = []
        
        do {
            tasks = [
                try Task(name: "Morning Run", details: "Go for a 5K run to start the day strong.", inspirationPoints: 10, hoursToExpiration: 12),
                try Task(name: "Read a Book", details: "Read at least 20 pages of a book.", inspirationPoints: 5, hoursToExpiration: 24),
                try Task(name: "Practice Coding", details: "Spend an hour coding in Swift.", inspirationPoints: 15, hoursToExpiration: 8),
                try Task(name: "Meditation", details: "Meditate for 15 minutes to clear your mind.", inspirationPoints: 7, hoursToExpiration: 6),
                try Task(name: "Write a Journal", details: "Write about your day and reflections.", inspirationPoints: 8, hoursToExpiration: 10),
                try Task(name: "Complete a Workout", details: "Do a full-body workout at the gym.", inspirationPoints: 12, hoursToExpiration: 14),
                try Task(name: "Cook a Healthy Meal", details: "Prepare a nutritious homemade meal.", inspirationPoints: 9, hoursToExpiration: 12),
                try Task(name: "Drink Water", details: "Drink at least 8 glasses of water.", inspirationPoints: 4, hoursToExpiration: 24),
                try Task(name: "Declutter Your Desk", details: "Organize and clean your workspace.", inspirationPoints: 6, hoursToExpiration: 5),
                try Task(name: "Call a Friend", details: "Catch up with a friend or family member.", inspirationPoints: 7, hoursToExpiration: 16),
                try Task(name: "Complete a Side Project Task", details: "Make progress on a personal project.", inspirationPoints: 15, hoursToExpiration: 48),
                try Task(name: "Stretch", details: "Perform a 10-minute stretching routine.", inspirationPoints: 5, hoursToExpiration: 3),
                try Task(name: "Plan Your Day", details: "Write down a to-do list for tomorrow.", inspirationPoints: 6, hoursToExpiration: 12),
                try Task(name: "Help Someone", details: "Do a small act of kindness today.", inspirationPoints: 10, hoursToExpiration: 18),
                try Task(name: "Listen to a Podcast", details: "Learn something new from a podcast.", inspirationPoints: 8, hoursToExpiration: 20),
                try Task(name: "Take a Walk", details: "Go for a 20-minute walk outside.", inspirationPoints: 7, hoursToExpiration: 6),
                try Task(name: "Limit Screen Time", details: "Avoid screens for one hour before bed.", inspirationPoints: 9, hoursToExpiration: 24),
                try Task(name: "Sketch or Doodle", details: "Draw something creative for fun.", inspirationPoints: 6, hoursToExpiration: 8),
                try Task(name: "Try a New Hobby", details: "Spend time exploring a new interest.", inspirationPoints: 12, hoursToExpiration: 48),
                try Task(name: "Organize Digital Files", details: "Sort and clean up your computer files.", inspirationPoints: 10, hoursToExpiration: 24)
            ]
        } catch TaskCreationError.InvalidExpiration {
            print("Failed to create tasks")
        } catch {
            print("An unexpected error occured")
        }
        
        return tasks
    }
}
